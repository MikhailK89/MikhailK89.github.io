{"version":3,"sources":["components/Add.js","components/Article.js","components/News.js","App.js","serviceWorker.js","index.js"],"names":["Add","state","name","text","agree","onBtnClickHandler","e","preventDefault","props","onAddNews","id","Date","author","slice","bigText","handleChange","currentTarget","value","setState","handleCheckboxChange","checked","validate","trim","this","className","type","onChange","placeholder","onClick","disabled","React","Component","Article","visible","handleReadMoreClick","data","href","Fragment","News","renderNews","length","map","item","key","App","news","isLoaded","errCheck","handleAddNews","nextNews","fetch","then","response","json","setTimeout","catch","err","filteredNews","Array","isArray","forEach","replace","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9590ef13.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n// добавляет новость с помощью формы\r\nclass Add extends React.Component {\r\n  state = {\r\n    name: '',\r\n\ttext: '',\r\n\tagree: false\r\n  };\r\n  \r\n  // при нажатии на кнопку создаёт новый объект\r\n  // и меняет состояние внутри App,\r\n  // что приводит к новому рендерингу\r\n  onBtnClickHandler = (e) => {\r\n    e.preventDefault();\r\n\tconst {name, text} = this.state;\r\n\t\r\n\t// с помощью пропсов получаем функцию из App,\r\n\t// которая сохраняет доступ к состоянию внутри App через замыкание\r\n\tthis.props.onAddNews({\r\n\t  id: +new Date(),\r\n\t  author: name,\r\n\t  text: text.slice(0, 30), // первые 30 символов попадают в text\r\n\t  bigText: text.slice(30)\r\n\t});\r\n  };\r\n  \r\n  // отслеживает изменение полей с именем и текстом\r\n  handleChange = (e) => {\r\n    const {id, value} = e.currentTarget;\r\n\tthis.setState({[id]: value});\r\n  };\r\n  \r\n  // отслеживает наличие флажка\r\n  handleCheckboxChange = (e) => {\r\n    this.setState({agree: e.currentTarget.checked});\r\n  };\r\n  \r\n  // должны быть заполнены оба поля и стоять флажок,\r\n  // чтобы активировалась кнопка\r\n  validate = () => {\r\n    const {name, text, agree} = this.state;\r\n\tif (name.trim() && text.trim() && agree) {\r\n\t  return true;\r\n\t}\r\n\treturn false;\r\n  };\r\n  \r\n  render() {\r\n    const {name, text} = this.state;\r\n\t\r\n\treturn (\r\n\t  <form className='add'>\r\n\t    <input\r\n\t\t  id='name'\r\n\t\t  type='text'\r\n\t\t  onChange={this.handleChange}\r\n\t\t  className='add__author'\r\n\t\t  placeholder='Ваше имя'\r\n\t\t  value={name}\r\n\t\t/>\r\n\t\t<textarea\r\n\t\t  id='text'\r\n\t\t  onChange={this.handleChange}\r\n\t\t  className='add__text'\r\n\t\t  placeholder='Текст новости'\r\n\t\t  value={text}\r\n\t\t></textarea>\r\n\t\t<label className='add__checkrule'>\r\n\t\t  <input type='checkbox' onChange={this.handleCheckboxChange} />Я согласен с правилами\r\n\t\t</label>\r\n\t\t<button\r\n\t\t  className='add__btn'\r\n\t\t  onClick={this.onBtnClickHandler}\r\n\t\t  disabled={!this.validate()}>\r\n\t\t  Добавить новость\r\n\t\t</button>\r\n\t  </form>\r\n\t);\r\n  }\r\n}\r\n\r\nexport {Add};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react'\r\n\r\n// формирует новость из полученного от News объекта\r\nclass Article extends React.Component {\r\n  state = {\r\n    visible: false\r\n  };\r\n  \r\n  // обрабатывает раскрытие и скрытие текста\r\n  handleReadMoreClick = (e) => {\r\n    e.preventDefault();\r\n\tthis.setState((state) => ({\r\n\t  visible: !state.visible\r\n\t}));\r\n  };\r\n  \r\n  render() {\r\n\t// извлекаем данные из объекта\r\n\tconst {author, text, bigText} = this.props.data;\r\n\tconst {visible} = this.state;\r\n\t\r\n\treturn (\r\n\t  <div className=\"article\">\r\n\t    <p className=\"news__author\">{author}</p>\r\n\t\t<p className=\"news__text\">{text}</p>\r\n\t\t{!visible &&\r\n\t\t <a onClick={this.handleReadMoreClick}\r\n\t\t    href=\"#readmore\"\r\n\t\t\tclassName=\"news__readmore\">Подробнее</a>\r\n\t\t}\r\n\t\t{visible &&\r\n\t\t <React.Fragment>\r\n\t\t   <p className=\"news__big-text\">{bigText}</p>\r\n\t\t   <a onClick={this.handleReadMoreClick}\r\n              href=\"#readmore\"\r\n\t\t\t  className=\"news__readmore\">Скрыть</a>\r\n\t\t </React.Fragment>\r\n\t\t}\r\n\t  </div>\r\n\t);\r\n  }\r\n}\r\n\r\nexport {Article};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react'\r\n\r\nimport {Article} from './Article.js'\r\n\r\n// обрабатывает массив с новостями\r\nclass News extends React.Component {\r\n  renderNews = () => {\r\n\tconst {data} = this.props;\r\n\tlet newsTemplate = null;\r\n\t\r\n\t// каждый объект из массива передаём в Article\r\n\tif (data.length) {\r\n\t  newsTemplate = data.map(function(item) {\r\n\t\treturn <Article key={item.id} data={item} />; // массив компонентов\r\n\t  });\r\n\t} else {\r\n\t  newsTemplate = <p>К сожалению новостей нет</p>;\r\n\t}\r\n\t\r\n\treturn newsTemplate;\r\n  };\r\n  \r\n  render() {\r\n\tconst {data} = this.props;\r\n\t\r\n\treturn (\r\n\t  <div className=\"news\">\r\n\t    {data.length ? (\r\n\t\t  <strong className=\"news__count\">\r\n\t\t    Всего новостей: {data.length}\r\n\t\t  </strong>\r\n        ) : null}\r\n\t\t{this.renderNews()} {/* рендерим массив компонентов Article */}\r\n\t  </div>\r\n\t);\r\n  }\r\n}\r\n\r\nexport {News};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import React from 'react';\nimport './App.css';\n\nimport {Add} from './components/Add.js'\nimport {News} from './components/News.js'\n\n\nclass App extends React.Component {\n  state = {\n    news: null,\n\tisLoaded: false,\n\terrCheck: false\n  };\n  \n  // фильтр спама на слово pubg\n  static getDerivedStateFromProps(props, state) {\n\tlet filteredNews;\n\t\n\tif (Array.isArray(state.news)) {\n\t  filteredNews = [...state.news]; // копия массива\n\t  \n\t  filteredNews.forEach((item) => {\n\t\titem.text = item.text.replace(/pubg/gi, '<спам>');\n\t\titem.bigText = item.bigText.replace(/pubg/gi, '<спам>');\n\t  });\n\t  \n\t  return {news: filteredNews};\n\t}\n\t\n\treturn null;\n  }\n  \n  // получить данные из json после первой загрузки страницы\n  componentDidMount() {\n\tfetch('/add-news-site/data/newsData.json')\n\t  .then(response => {\n\t\treturn response.json();\n\t  })\n\t  .then(data => {\n\t\tsetTimeout(() => {\n\t\t  this.setState({news: data, isLoaded: true});\n\t\t}, 3000); // задержка\n\t  })\n\t  .catch(err => this.setState({errCheck: true}));\n  }\n  \n  // добавление нового объекта (новости)\n  handleAddNews = (data) => {\n    const nextNews = [data, ...this.state.news];\n\tthis.setState({news: nextNews});\n  };\n  \n  render() {\n\tconst {news, isLoaded, errCheck} = this.state;\n\t\n\treturn (\n\t  <React.Fragment>\n\t    {isLoaded && <Add onAddNews={this.handleAddNews} />}\n\t\t<h3>Новости</h3>\n\t\t{errCheck && <p>Ошибка при загрузке данных...</p>}\n\t\t{(!isLoaded && !errCheck) && <p>Загрузка данных...</p>}\n\t\t{isLoaded && <News data={news} />}\n\t  </React.Fragment>\n\t);\n  }\n}\n\nexport default App;\n\n\n\n\n\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}