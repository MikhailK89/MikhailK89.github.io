{"version":3,"sources":["components/Add.js","components/Message.js","components/Chat.js","components/Contacts.js","components/User.js","components/Header.js","components/Loading.js","components/Error.js","App.js","serviceWorker.js","index.js"],"names":["Add","state","author","bigText","onBtnClickHandler","event","preventDefault","props","onAddPosts","id","Date","setState","handleChange","currentTarget","value","validate","trim","this","className","onChange","placeholder","onClick","disabled","React","Component","Message","visible","setClassAuthor","counter","setClassPost","handleReadMoreClick","split","data","text","slice","cropAuthor","href","Chat","renderPosts","prevName","length","map","item","key","Contacts","list","listCopy","isLoaded","searchText","renderContacts","src","alt","handleSearch","filteredList","filter","nameArr","i","RegExp","test","getChatData","checkStatus","fetch","then","response","json","setTimeout","catch","err","loadChat","type","autoComplete","User","document","addEventListener","parentElem","target","closest","burgerElem","userElem","querySelector","clickEvent","Event","bubbles","dispatchEvent","Header","elem","classList","toggle","contains","style","transform","chatWith","contactsStatus","Fragment","handleBurger","Loading","Error","App","posts","chatStatus","spinSettings","timerId","pos","switcher","borderColor","name","filteredData","handleAddPosts","nextPosts","chatElem","getElementsByClassName","scrollTop","scrollHeight","innerHTML","contactsLoading","status","runSpinner","arr","spinner","setInterval","clearInterval","statusText","createStatusText","filteredPosts","Array","isArray","forEach","replace","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"ySAGMA,E,2MACLC,MAAQ,CACPC,OAAQ,UACRC,QAAS,I,EAIVC,kBAAoB,SAACC,GACpBA,EAAMC,iBADwB,MAEJ,EAAKL,MAAxBC,EAFuB,EAEvBA,OAAQC,EAFe,EAEfA,QAIf,EAAKI,MAAMC,WAAW,CACrBC,IAAK,IAAIC,KACTR,SACAC,YAGD,EAAKQ,SAAS,CAACR,QAAS,M,EAIzBS,aAAe,SAACP,GAAW,IAAD,EACLA,EAAMQ,cAAnBJ,EADkB,EAClBA,GAAIK,EADc,EACdA,MACX,EAAKH,SAAL,eAAgBF,EAAKK,K,EAItBC,SAAW,WAAO,IAAD,EACU,EAAKd,MAAxBC,EADS,EACTA,OAAQC,EADC,EACDA,QAEf,SAAID,EAAOc,SAAUb,EAAQa,S,wEAOpB,IACFb,EAAWc,KAAKhB,MAAhBE,QAEP,OACC,yBAAKe,UAAU,OACd,0BAAMA,UAAU,aACf,yBAAKA,UAAU,cACd,8BACCT,GAAG,UACHU,SAAUF,KAAKL,aACfM,UAAU,YACVE,YAAY,oBACZN,MAAOX,KAIT,yBAAKe,UAAU,aACd,4BACCA,UAAU,WACVG,QAASJ,KAAKb,kBACdkB,UAAWL,KAAKF,YAHjB,e,GAxDYQ,IAAMC,WCAlBC,E,2MACLxB,MAAQ,CACPyB,SAAS,G,EAIVC,eAAiB,WAGhB,OAFgB,EAAKpB,MAAMqB,QAEb,IAAM,EACZ,uBAEA,yB,EAITC,aAAe,WAGd,OAFgB,EAAKtB,MAAMqB,QAEb,IAAM,EACZ,qBAEA,uB,EAKTE,oBAAsB,SAACzB,GACtBA,EAAMC,iBAEN,EAAKK,UAAS,SAACV,GAAD,MAAY,CACzByB,SAAUzB,EAAMyB,a,0EAKPxB,GACV,OAAOA,EAAO6B,MAAM,KAAK,GAAGf,S,+BAGnB,IAAD,EACgBC,KAAKV,MAAMyB,KAA9B9B,EADG,EACHA,OAAQC,EADL,EACKA,QACNuB,EAAWT,KAAKhB,MAAhByB,QAEHO,EAAO9B,EAAQ+B,MAAM,EAAG,KAG5B,OAFA/B,EAAUA,EAAQ+B,MAAM,KAGvB,yBAAKhB,UAAU,WACd,yBAAKA,UAAWD,KAAKU,kBACnBV,KAAKkB,WAAWjC,IAGlB,yBAAKgB,UAAWD,KAAKY,gBACpB,0BAAMX,UAAU,iBACde,GAGDP,GACA,0BAAMR,UAAU,qBACdf,IAIDuB,GAAWvB,GACZ,yBAAKe,UAAU,qBACd,uBAAGG,QAASJ,KAAKa,oBACfM,KAAK,KADP,cAKDV,GACA,yBAAKR,UAAU,iBACd,uBAAGG,QAASJ,KAAKa,oBACfM,KAAK,KADP,e,GAzEeb,IAAMC,WCEtBa,E,2MAELC,YAAc,WAAO,IACbN,EAAQ,EAAKzB,MAAbyB,KAGHO,EAAW,KACXX,EAAU,EAuBd,OApBII,EAAKQ,OACIR,EAAKS,KAAI,SAASC,GAS7B,OAPiB,OAAbH,IAAmBA,EAAWG,EAAKxC,QAEnCqC,IAAaG,EAAKxC,SACrB0B,IACAW,EAAWG,EAAKxC,QAGV,kBAAC,EAAD,CAASyC,IAAKD,EAAKjC,GAAIuB,KAAMU,EAAMd,QAASA,OAInD,yBAAKV,UAAU,wBACd,kD,wEAQM,IACFc,EAAQf,KAAKV,MAAbyB,KAEP,OACC,yBAAKd,UAAU,QAEbc,EAAKQ,OACL,yBAAKtB,UAAU,iBAAf,gBACec,EAAKQ,QAEjB,KAGHvB,KAAKqB,mB,GA9CSf,IAAMC,WCHnBoB,E,2MACJ3C,MAAQ,CACN4C,KAAM,KACNC,SAAU,KACVC,UAAU,EACVC,WAAY,I,EA4BdC,eAAiB,WAyBf,OAvBa,EAAKhD,MAAM4C,KAEJJ,KAAI,SAAAC,GACtB,OACE,yBAAKxB,UAAU,iBAAiByB,IAAKD,EAAKjC,IACxC,yBAAKS,UAAU,mBACb,yBAAKgC,IAAKR,EAAKQ,IAAKC,IAAI,MAG1B,yBAAKjC,UAAU,UACb,yBAAKA,UAAU,gBACZwB,EAAKxC,QAGR,yBAAKgB,UAAU,UACb,yBAAKA,UAAU,iBACf,yBAAKA,UAAU,iBAAf,iB,EAWZkC,aAAe,SAAC/C,GACd,IAAM2C,EAAa3C,EAAMQ,cAAcC,MAGjCuC,EAFW,EAAKpD,MAAM6C,SAEEQ,QAAO,SAACZ,GAIpC,IAFA,IAAMa,EAAUb,EAAKxC,OAAO6B,MAAM,KAEzByB,EAAI,EAAGA,EAAID,EAAQf,OAAQgB,IAAK,CAIvC,GAHe,IAAIC,OAAJ,WAAeT,GAAc,KACrBU,KAAMH,EAAQC,GAAGxC,QAE3B,OAAO,EAGtB,OAAO,KAGT,EAAKL,SAAS,CACZqC,aACAH,KAAMQ,K,mFA1EW,IAAD,SACiBpC,KAAKV,MAAjCoD,EADW,EACXA,YAAaC,EADF,EACEA,YAGpBC,MAAM,4BACHC,MAAK,SAAAC,GACJ,OAAOA,EAASC,UAEjBF,MAAK,SAAA9B,GAEJiC,YAAW,WACT,EAAKtD,SAAS,CACZkC,KAAMb,EACNc,SAAUd,EACVe,UAAU,IAGZa,EAAY,UACZD,EAAY3B,EAAK,GAAG9B,UAEnB,QAEJgE,OAAM,SAAAC,GAAG,OAAIP,EAAY,c,+BAwDpB,IAAD,EACwB3C,KAAKhB,MAA7B8C,EADA,EACAA,SAAUC,EADV,EACUA,WACXoB,EAAWnD,KAAKV,MAAM6D,SAE5B,OACE,yBAAKlD,UAAU,WAAWG,QAAS+C,GACjC,yBAAKlD,UAAU,UACb,2BACEA,UAAU,gBACVC,SAAUF,KAAKmC,aACfiB,KAAK,OACLjD,YAAY,SACZN,MAAOkC,EACPsB,aAAa,QACf,yBAAKpD,UAAU,gBACb,yBAAKgC,IAAI,2BAA2BC,IAAI,aAI5C,yBAAKjC,UAAU,kBACZ6B,GAAY9B,KAAKgC,uB,GA1GL1B,IAAMC,WCAvB+C,E,4LAIFC,SAASC,iBAAiB,SAAS,SAASpE,GAC1C,IAAMqE,EAAarE,EAAMsE,OAAOC,QAAQ,SAClCC,EAAaxE,EAAMsE,OAAOC,QAAQ,mBAClCE,EAAWN,SAASO,cAAc,cAExC,IAAKL,IAAeG,GAAcC,EAAU,CAC1C,IAAME,EAAa,IAAIC,MAAM,QAAS,CAACC,SAAS,IAChDV,SAASO,cAAc,mBAAmBI,cAAcH,S,+BAO5D,OACE,yBAAK9D,UAAU,QACb,yBAAKA,UAAU,eACb,yBAAKgC,IAAI,oCAAoCC,IAAI,MAGnD,yBAAKjC,UAAU,eACb,yBAAKA,UAAU,cAAf,WACA,yBAAKA,UAAU,cACb,yBAAKgC,IAAI,sCADX,mBAIA,yBAAKhC,UAAU,aACb,yBAAKgC,IAAI,2CADX,sBAMF,yBAAKhC,UAAU,iBACb,uBAAGA,UAAU,iBAAiBkB,KAAK,KACjC,yBAAKc,IAAI,0CADX,YAIA,uBAAGhC,UAAU,iBAAiBkB,KAAK,KACjC,yBAAKc,IAAI,0CADX,YAIA,uBAAGhC,UAAU,iBAAiBkB,KAAK,KACjC,yBAAKc,IAAI,0CADX,YAIA,uBAAGhC,UAAU,eAAekB,KAAK,KAC/B,yBAAKc,IAAI,wCADX,kBAIA,uBAAGhC,UAAU,aAAakB,KAAK,KAC7B,yBAAKc,IAAI,sCADX,c,GArDS3B,IAAMC,WCEnB4D,E,qLAGQ/E,GACV,IAAMgF,EAAOb,SAASO,cAAc,SACpCM,EAAKC,UAAUC,OAAO,QAElBF,EAAKC,UAAUE,SAAS,QAC7BnF,EAAMQ,cAAc4E,MAAMC,UAAY,iBAEtCrF,EAAMQ,cAAc4E,MAAMC,UAAY,K,+BAI7B,IAAD,EAC4BzE,KAAKV,MAAjCoF,EADA,EACAA,SAAUC,EADV,EACUA,eAEjB,OACE,yBAAK1E,UAAU,UAEQ,WAAnB0E,GACA,kBAAC,IAAMC,SAAP,KACE,yBAAK3E,UAAU,gBACb,yBACEA,UAAU,iBACVgC,IAAI,yBACJC,IAAI,SACJ9B,QAASJ,KAAK6E,eAChB,yBAAK5E,UAAU,iBAAf,WAGDyE,GACC,yBAAKzE,UAAU,iBAAf,iBAEE,0BAAMA,UAAU,qBAAqByE,IAIzC,kBAAC,EAAD,Y,GAtCSpE,IAAMC,WCFrBuE,E,iLAEM,IACD9D,EAAQhB,KAAKV,MAAb0B,KAEP,OACE,yBAAKf,UAAU,WACb,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,kBACf,yBAAKA,UAAU,kBAAkBe,S,GATrBV,IAAMC,WCAtBwE,E,iLAEM,IACD/D,EAAQhB,KAAKV,MAAb0B,KAEP,OACE,yBAAKf,UAAU,SACb,yBAAKA,UAAU,gBACZe,Q,GARSV,IAAMC,WCyNXyE,E,2MA/MdhG,MAAQ,CACPiG,MAAO,KACPN,eAAgB,GAChBO,WAAY,I,EAGbR,SAAW,G,EAGXS,aAAe,CACdC,QAAS,KACTC,IAAK,EACLC,UAAU,EACVC,YAAa,W,EAgCd7C,YAAc,SAAC8C,GAEd5C,MAAM,wBACJC,MAAK,SAAAC,GACL,OAAOA,EAASC,UAEhBF,MAAK,SAAA9B,GAEL,IAAM0E,EAAe1E,EAAKsB,QAAO,SAACZ,GACjC,GAAIA,EAAKiD,WAAac,EACrB,OAAO,KAITxC,YAAW,WACV,EAAK0B,SAAWc,EAEhB,EAAK9F,SAAS,CACbuF,MAAOQ,EACPP,WAAY,aAEX,QAEHjC,OAAM,SAAAC,GAAG,OAAI,EAAKxD,SAAS,CAACwF,WAAY,c,EAI3CQ,eAAiB,SAAC3E,GACjB,IAAM4E,EAAS,sBAAO,EAAK3G,MAAMiG,OAAlB,CAAyBlE,IACxC,EAAKrB,SAAS,CAACuF,MAAOU,IAEtB3C,YAAW,WACV,IAAM4C,EAAWrC,SAASsC,uBAAuB,QAAQ,GACzDD,EAASE,UAAYF,EAASG,eAC5B,I,EAIJ5C,SAAW,SAAC/D,GACX,IAAMqE,EAAarE,EAAMsE,OAAOC,QAAQ,mBAExC,GAAIF,EAAY,CACf,IACMiB,EADOjB,EAAWK,cAAc,iBAChBkC,UAEtB,EAAKtG,SAAS,CAACwF,WAAY,KAE3B,EAAKxC,YAAYgC,K,EAKnBuB,gBAAkB,SAACC,GAClB,EAAKxG,SAAS,CAACiF,eAAgBuB,K,EAIhCC,WAAa,WACZ,IAAMhB,EAAe,EAAKA,aAE1B,IAAIA,EAAaC,QAAjB,CAEA,IAAMgB,EAAM,CAAC,YAAa,cAAe,eAAgB,cAErDf,EAAMF,EAAaE,IACnBC,EAAWH,EAAaG,SAEtBe,EAAU9C,SAASO,cAAc,kBAEnCuC,IACHA,EAAQ7B,MAAMe,YAAcJ,EAAaI,aAG1C,IAAMH,EAAUkB,aAAY,WAEtBnB,EAAaC,UAASD,EAAaC,QAAUA,GAElD,IAAMiB,EAAU9C,SAASO,cAAc,kBAEvC,IAAKuC,EAIJ,OAHAlB,EAAaC,QAAU,UACvBmB,cAAcnB,GAKH,IAARC,IACHA,EAAM,EACNC,GAAYA,GAIZe,EAAQ7B,MAAM4B,EAAIf,IADfC,EACuB,wBAEA,oBAG3BD,IAEAF,EAAaE,IAAMA,EACnBF,EAAaG,SAAWA,EACxBH,EAAaI,YAAcc,EAAQ7B,MAAMe,cAEvC,O,mFAnIHvF,KAAKmG,e,2CAILI,cAAcvG,KAAKmF,aAAaC,SAChCpF,KAAKmF,aAAaC,QAAU,KAC5BpF,KAAKmG,e,uCAmIWxB,EAAgBO,GAEhC,IAAIsB,EAAa,GAEjB,MAAuB,UAAnB7B,GACH6B,EAAa,4BACL,kBAAC,EAAD,CAAOxF,KAAMwF,KAEI,UAAftB,GACVsB,EAAa,wBACL,kBAAC,EAAD,CAAOxF,KAAMwF,KAEQ,KAAnB7B,GACV6B,EAAa,sBACL,kBAAC,EAAD,CAASxF,KAAMwF,KAEM,WAAnB7B,GAA8C,KAAfO,GACzCsB,EAAa,kBACL,kBAAC,EAAD,CAASxF,KAAMwF,UAFjB,I,+BAOE,IAAD,EAEoCxG,KAAKhB,MAA1CiG,EAFC,EAEDA,MAAON,EAFN,EAEMA,eAAgBO,EAFtB,EAEsBA,WAE9B,OACC,yBAAKjF,UAAU,aACd,kBAAC,EAAD,CACCyE,SAAU1E,KAAK0E,SACfC,eAAgBA,IAGjB,yBAAK1E,UAAU,QACd,kBAAC,EAAD,CACCkD,SAAUnD,KAAKmD,SACfR,YAAa3C,KAAKiG,gBAClBvD,YAAa1C,KAAK0C,cAGnB,yBAAKzC,UAAU,WACbD,KAAKyG,iBAAiB9B,EAAgBO,GAEtB,WAAfA,GAA4B,kBAAC,EAAD,CAAMnE,KAAMkE,IACzB,WAAfC,GAA4B,kBAAC,EAAD,CAAK3F,WAAYS,KAAK0F,uB,gDA5KzBpG,EAAON,GACtC,IAAI0H,EAEJ,OAAIC,MAAMC,QAAQ5H,EAAMiG,SACvByB,EAAa,YAAO1H,EAAMiG,QAEZ4B,SAAQ,SAACpF,GACtBA,EAAKvC,QAAUuC,EAAKvC,QAAQ4H,QAAQ,YAAa,aAG3C,CAAC7B,MAAOyB,IAGT,S,GAzCSpG,IAAMC,WCCJwG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS9D,SAAS+D,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5E,MAAK,SAAA6E,GACjCA,EAAaC,kB","file":"static/js/main.4b6aa2d5.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n// добавляет новость с помощью формы\r\nclass Add extends React.Component {\r\n\tstate = {\r\n\t\tauthor: 'Butters',\r\n\t\tbigText: ''\r\n\t};\r\n\r\n\t// создаёт новый объект и меняет состояние внутри App\r\n\tonBtnClickHandler = (event) => {\r\n\t\tevent.preventDefault();\r\n\t\tconst {author, bigText} = this.state;\r\n\r\n\t\t// получаем функцию из App,\r\n\t\t// которая сохраняет доступ к состоянию внутри App через замыкание\r\n\t\tthis.props.onAddPosts({\r\n\t\t\tid: +new Date(),\r\n\t\t\tauthor,\r\n\t\t\tbigText\r\n\t\t});\r\n\r\n\t\tthis.setState({bigText: ''}); // очистить поле ввода после отправки\r\n\t};\r\n\r\n\t// отслеживает изменение поля для ввода текста\r\n\thandleChange = (event) => {\r\n\t\tconst {id, value} = event.currentTarget;\r\n\t\tthis.setState({[id]: value});\r\n\t};\r\n\r\n\t// активирует кнопку отправки сообщения\r\n\tvalidate = () => {\r\n\t\tconst {author, bigText} = this.state;\r\n\r\n\t\tif (author.trim() && bigText.trim()) {\r\n\t\t\treturn true;\r\n\t\t}\r\n\r\n\t\treturn false; // деактивировать кнопку\r\n\t};\r\n\r\n\trender() {\r\n\t\tconst {bigText} = this.state;\r\n\r\n\t\treturn (\r\n\t\t\t<div className='add'>\r\n\t\t\t\t<form className='add__form'>\r\n\t\t\t\t\t<div className=\"add__input\">\r\n\t\t\t\t\t\t<textarea\r\n\t\t\t\t\t\t\tid='bigText'\r\n\t\t\t\t\t\t\tonChange={this.handleChange}\r\n\t\t\t\t\t\t\tclassName='add__text'\r\n\t\t\t\t\t\t\tplaceholder='Type your message'\r\n\t\t\t\t\t\t\tvalue={bigText}\r\n\t\t\t\t\t\t></textarea>\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t\t<div className=\"add__send\">\r\n\t\t\t\t\t\t<button\r\n\t\t\t\t\t\t\tclassName='add__btn'\r\n\t\t\t\t\t\t\tonClick={this.onBtnClickHandler}\r\n\t\t\t\t\t\t\tdisabled={!this.validate()}>\r\n\t\t\t\t\t\t\tSend\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</form>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport {Add};","import React from 'react'\r\n\r\n// формирует сообщение из полученного от Chat объекта\r\nclass Message extends React.Component {\r\n\tstate = {\r\n\t\tvisible: false\r\n\t};\r\n\r\n\t// определяют очерёдность сообщений\r\n\tsetClassAuthor = () => {\r\n\t\tconst counter = this.props.counter;\r\n\r\n\t\tif (counter % 2 === 0) {\r\n\t\t\treturn 'message__author-left';\r\n\t\t} else {\r\n\t\t\treturn 'message__author-right';\r\n\t\t}\r\n\t};\r\n\r\n\tsetClassPost = () => {\r\n\t\tconst counter = this.props.counter;\r\n\r\n\t\tif (counter % 2 === 0) {\r\n\t\t\treturn 'message__post-left';\r\n\t\t} else {\r\n\t\t\treturn 'message__post-right';\r\n\t\t}\r\n\t};\r\n\r\n\t// обрабатывает раскрытие и скрытие текста\r\n\thandleReadMoreClick = (event) => {\r\n\t\tevent.preventDefault();\r\n\r\n\t\tthis.setState((state) => ({\r\n\t\t\tvisible: !state.visible\r\n\t\t}));\r\n\t};\r\n\r\n\t// сократить имя для показа в чате\r\n\tcropAuthor(author) {\r\n\t\treturn author.split(' ')[0].trim();\r\n\t}\r\n\r\n\trender() {\r\n\t\tlet {author, bigText} = this.props.data; // извлекаем данные из объекта\r\n\t\tconst {visible} = this.state;\r\n\r\n\t\tlet text = bigText.slice(0, 300); // показываем первые 300 символов\r\n\t\tbigText = bigText.slice(300);\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"message\">\r\n\t\t\t\t<div className={this.setClassAuthor()}>\r\n\t\t\t\t\t{this.cropAuthor(author)}\r\n\t\t\t\t</div>\r\n\r\n\t\t\t\t<div className={this.setClassPost()}>\r\n\t\t\t\t\t<span className=\"message__text\">\r\n\t\t\t\t\t\t{text}\r\n\t\t\t\t\t</span>\r\n\r\n\t\t\t\t\t{visible &&\r\n\t\t\t\t\t\t<span className=\"message__big-text\">\r\n\t\t\t\t\t\t\t{bigText}\r\n\t\t\t\t\t\t</span>\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t{!visible && bigText &&\r\n\t\t\t\t\t\t<div className=\"message__readmore\">\r\n\t\t\t\t\t\t\t<a onClick={this.handleReadMoreClick}\r\n\t\t\t\t\t\t\t\t href=\"#\">show more</a>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\t{visible &&\r\n\t\t\t\t\t\t<div className=\"message__hide\">\r\n\t\t\t\t\t\t\t<a onClick={this.handleReadMoreClick}\r\n\t\t\t\t\t\t\t\t href=\"#\">hide</a>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport {Message};","import React from 'react'\r\n\r\nimport {Message} from './Message.js'\r\n\r\n// обрабатывает массив с сообщениями\r\nclass Chat extends React.Component {\r\n\r\n\trenderPosts = () => {\r\n\t\tconst {data} = this.props;\r\n\r\n\t\tlet postsTemp = null;\r\n\t\tlet prevName = null; // запомнить имя\r\n\t\tlet counter = 0; // очерёдность сообщений\r\n\r\n\t\t// создаём массив компонентов Message\r\n\t\tif (data.length) {\r\n\t\t\tpostsTemp = data.map(function(item) {\r\n\r\n\t\t\t\tif (prevName === null) prevName = item.author;\r\n\r\n\t\t\t\tif (prevName !== item.author) {\r\n\t\t\t\t\tcounter++;\r\n\t\t\t\t\tprevName = item.author;\r\n\t\t\t\t}\r\n\r\n\t\t\t\treturn <Message key={item.id} data={item} counter={counter} />;\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\tpostsTemp = (\r\n\t\t\t\t<div className=\"message__no-messages\">\r\n\t\t\t\t\t<div>no messages yet</div>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t\t}\r\n\r\n\t\treturn postsTemp;\r\n\t};\r\n\r\n\trender() {\r\n\t\tconst {data} = this.props;\r\n\r\n\t\treturn (\r\n\t\t\t<div className=\"chat\">\r\n\r\n\t\t\t\t{data.length ? (\r\n\t\t\t\t\t<div className=\"chat__counter\">\r\n\t\t\t\t\t\ttotal posts: {data.length}\r\n\t\t\t\t\t</div>\r\n\t\t\t\t) : null}\r\n\r\n\t\t\t\t{/* рендерим массив компонентов Message */}\r\n\t\t\t\t{this.renderPosts()}\r\n\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport {Chat};","import React from 'react'\r\n\r\nclass Contacts extends React.Component {\r\n  state = {\r\n    list: null,\r\n    listCopy: null,\r\n    isLoaded: false,\r\n    searchText: ''\r\n  };\r\n\r\n  componentDidMount() {\r\n    const {getChatData, checkStatus} = this.props;\r\n\r\n    // загрузить список контактов\r\n    fetch('./data/contactsData.json')\r\n      .then(response => {\r\n        return response.json();\r\n      })\r\n      .then(data => {\r\n\r\n        setTimeout(() => {\r\n          this.setState({\r\n            list: data,\r\n            listCopy: data,\r\n            isLoaded: true\r\n          });\r\n\r\n          checkStatus('loaded'); // отправить статус в App\r\n          getChatData(data[0].author); // загрузить первый контакт\r\n\r\n        }, 3000); // задержка загрузки\r\n      })\r\n      .catch(err => checkStatus('error'));\r\n  }\r\n\r\n  renderContacts = () => {\r\n    let contactsTemp = null;\r\n    const list = this.state.list;\r\n\r\n    contactsTemp = list.map(item => {\r\n      return (\r\n        <div className=\"contacts__item\" key={item.id}>\r\n          <div className=\"contacts__photo\">\r\n            <img src={item.src} alt=\"\" />\r\n          </div>\r\n\r\n          <div className=\"person\">\r\n            <div className=\"person__name\">\r\n              {item.author}\r\n            </div>\r\n\r\n            <div className=\"status\">\r\n              <div className=\"status__icon\"></div>\r\n              <div className=\"status__title\">online</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    });\r\n\r\n    return contactsTemp;\r\n  };\r\n\r\n  // фильтрация списка контактов\r\n  handleSearch = (event) => {\r\n    const searchText = event.currentTarget.value;\r\n    const listCopy = this.state.listCopy;\r\n\r\n    const filteredList = listCopy.filter((item) => {\r\n\r\n      const nameArr = item.author.split(' '); // имя в виде массива\r\n\r\n      for (let i = 0; i < nameArr.length; i++) {\r\n        const regexp = new RegExp(`^${searchText}`, 'i');\r\n        const compare = regexp.test( nameArr[i].trim() );\r\n\r\n        if (compare) return true;\r\n      }\r\n\r\n      return false;\r\n    });\r\n\r\n    this.setState({\r\n      searchText,\r\n      list: filteredList\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const {isLoaded, searchText} = this.state;\r\n    const loadChat = this.props.loadChat;\r\n\r\n    return (\r\n      <div className=\"contacts\" onClick={loadChat}>\r\n        <div className=\"search\">\r\n          <input\r\n            className=\"search__input\"\r\n            onChange={this.handleSearch}\r\n            type=\"text\"\r\n            placeholder=\"search\"\r\n            value={searchText}\r\n            autoComplete=\"off\" />\r\n          <div className=\"search__icon\">\r\n            <img src=\"./data/images/search.svg\" alt=\"search\" />\r\n          </div>\r\n        </div>\r\n        \r\n        <div className=\"contacts__list\">\r\n          {isLoaded && this.renderContacts()}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport {Contacts};","import React from 'react'\r\n\r\nclass User extends React.Component {\r\n\r\n  // закрывает .user при клике вне блока и бургера\r\n  componentDidMount() {\r\n    document.addEventListener('click', function(event) {\r\n      const parentElem = event.target.closest('.user');\r\n      const burgerElem = event.target.closest('.header__burger');\r\n      const userElem = document.querySelector('.user.show');\r\n\r\n      if (!parentElem && !burgerElem && userElem) {\r\n        const clickEvent = new Event('click', {bubbles: true}); // обязательно всплытие bubbles\r\n        document.querySelector('.header__burger').dispatchEvent(clickEvent); // вызов анимации\r\n      }\r\n    });\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <div className=\"user\">\r\n        <div className=\"user__photo\">\r\n          <img src=\"./data/images/avatars/butters.png\" alt=\"\" />\r\n        </div>\r\n\r\n        <div className=\"user__title\">\r\n          <div className=\"user__name\">Butters</div>\r\n          <div className=\"user__city\">\r\n            <img src=\"./data/images/user-icons/home.svg\" />\r\n            South Park, USA\r\n          </div>\r\n          <div className=\"user__tel\">\r\n            <img src=\"./data/images/user-icons/telephone.svg\" />\r\n            +1 (XXX) XXX-XXXX\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"user__options\">\r\n          <a className=\"user__contacts\" href=\"#\">\r\n            <img src=\"./data/images/user-icons/contacts.svg\" />\r\n            Contacts\r\n          </a>\r\n          <a className=\"user__favorite\" href=\"#\">\r\n            <img src=\"./data/images/user-icons/favorite.svg\" />\r\n            Favorite\r\n          </a>\r\n          <a className=\"user__settings\" href=\"#\">\r\n            <img src=\"./data/images/user-icons/settings.svg\" />\r\n            Settings\r\n          </a>\r\n          <a className=\"user__invite\" href=\"#\">\r\n            <img src=\"./data/images/user-icons/invite.svg\" />\r\n            Invite friends\r\n          </a>\r\n          <a className=\"user__help\" href=\"#\">\r\n            <img src=\"./data/images/user-icons/help.svg\" />\r\n            Help\r\n          </a>\r\n        </div>\r\n\t\t\t</div>\r\n    );\r\n  }\r\n}\r\n\r\nexport {User};","import React from 'react'\r\n\r\nimport {User} from './User.js'\r\n\r\nclass Header extends React.Component {\r\n\r\n  // анимация элемента burger\r\n\thandleBurger(event) {\r\n    const elem = document.querySelector('.user');\r\n    elem.classList.toggle('show');\r\n\r\n    if (elem.classList.contains('show')) {\r\n\t\t\tevent.currentTarget.style.transform = 'rotate(180deg)';\r\n\t\t} else {\r\n\t\t\tevent.currentTarget.style.transform = '';\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const {chatWith, contactsStatus} = this.props;\r\n\r\n    return (\r\n      <div className=\"header\">\r\n\r\n        {(contactsStatus === 'loaded') &&\r\n          <React.Fragment>\r\n            <div className=\"header__left\">\r\n              <img\r\n                className=\"header__burger\"\r\n                src=\"data/images/burger.svg\"\r\n                alt=\"burger\"\r\n                onClick={this.handleBurger} />\r\n              <div className=\"header__title\">Header</div>\r\n            </div>\r\n\r\n            {chatWith &&\r\n              <div className=\"header__right\">\r\n                Chat with:&nbsp;\r\n                <span className=\"header__chat-with\">{chatWith}</span>\r\n              </div>\r\n            }\r\n\r\n            <User />\r\n          </React.Fragment>\r\n        }\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport {Header};","import React from 'react'\r\n\r\nclass Loading extends React.Component {\r\n\r\n  render() {\r\n    const {text} = this.props;\r\n\r\n    return (\r\n      <div className=\"loading\">\r\n        <div className=\"loading__spinner\">\r\n          <div className=\"loading__icon\"></div>\r\n          <div className=\"loading__title\">{text}</div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport {Loading};","import React from 'react'\r\n\r\nclass Error extends React.Component {\r\n\r\n  render() {\r\n    const {text} = this.props;\r\n\r\n    return (\r\n      <div className=\"error\">\r\n        <div className=\"error__title\">\r\n          {text}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport {Error};","import React from 'react'\nimport './App.css'\n\nimport {Add} from './components/Add.js'\nimport {Chat} from './components/Chat.js'\nimport {Contacts} from './components/Contacts.js'\nimport {Header} from './components/Header.js'\nimport {Loading} from './components/Loading.js'\nimport {Error} from './components/Error.js'\n\n\nclass App extends React.Component {\n\tstate = {\n\t\tposts: null,\n\t\tcontactsStatus: '',\n\t\tchatStatus: ''\n\t};\n\n\tchatWith = ''; // имя собеседника\n\n\t// запоминаем настройки анимации спиннера\n\tspinSettings = {\n\t\ttimerId: null,\n\t\tpos: 0,\n\t\tswitcher: true,\n\t\tborderColor: '#434753'\n\t};\n\n\tcomponentDidMount() {\n\t\tthis.runSpinner(); // запуск анимации загрузки\n\t}\n\n\tcomponentDidUpdate() {\n\t\tclearInterval(this.spinSettings.timerId); // остановить старый спиннер\n\t\tthis.spinSettings.timerId = null;\n\t\tthis.runSpinner(); // запуск нового спиннера\n\t}\n\n\t// фильтр спама на слово wow\n\tstatic getDerivedStateFromProps(props, state) {\n\t\tlet filteredPosts;\n\n\t\tif (Array.isArray(state.posts)) {\n\t\t\tfilteredPosts = [...state.posts]; // копия массива\n\n\t\t\tfilteredPosts.forEach((item) => {\n\t\t\t\titem.bigText = item.bigText.replace(/\\bwow\\b/gi, '<spam>');\n\t\t\t});\n\n\t\t\treturn {posts: filteredPosts};\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t// получить данные для чата\n\t// вызывается в том числе из Contacts для загрузки по умолчанию\n\tgetChatData = (name) => {\n\n\t\tfetch('./data/chatData.json')\n\t\t\t.then(response => {\n\t\t\t\treturn response.json();\n\t\t\t})\n\t\t\t.then(data => {\n\n\t\t\t\tconst filteredData = data.filter((item) => {\n\t\t\t\t\tif (item.chatWith === name) {\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tthis.chatWith = name; // получить имя до рендеринга\n\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\tposts: filteredData,\n\t\t\t\t\t\tchatStatus: 'loaded'\n\t\t\t\t\t});\n\t\t\t\t}, 3000); // задержка загрузки\n\t\t\t})\n\t\t\t.catch(err => this.setState({chatStatus: 'error'}));\n\t};\n\n\t// добавление нового объекта (сообщения)\n\thandleAddPosts = (data) => {\n\t\tconst nextPosts = [...this.state.posts, data];\n\t\tthis.setState({posts: nextPosts});\n\n\t\tsetTimeout(function() {\n\t\t\tconst chatElem = document.getElementsByClassName('chat')[0]; // прокрутить вниз чат\n\t\t\tchatElem.scrollTop = chatElem.scrollHeight;\n\t\t}, 0);\n\t};\n\n\t// загрузка чата по выбранному имени (передаётся в Contacts)\n\tloadChat = (event) => {\n\t\tconst parentElem = event.target.closest('.contacts__item');\n\n\t\tif (parentElem) {\n\t\t\tconst elem = parentElem.querySelector('.person__name');\n\t\t\tconst chatWith = elem.innerHTML;\n\n\t\t\tthis.setState({chatStatus: ''}); // запустить анимацию загрузки\n\n\t\t\tthis.getChatData(chatWith);\n\t\t}\n\t};\n\n\t// получить состояние загрузки из Contacts\n\tcontactsLoading = (status) => {\n\t\tthis.setState({contactsStatus: status});\n\t};\n\n\t// запустить анимацию загрузки\n\trunSpinner = () => {\n\t\tconst spinSettings = this.spinSettings;\n\n\t\tif (spinSettings.timerId) return; // уже запущена анимация\n\n\t\tconst arr = ['borderTop', 'borderRight', 'borderBottom', 'borderLeft'];\n\n\t\tlet pos = spinSettings.pos; // позиция цвета\n\t\tlet switcher = spinSettings.switcher;\n\n\t\tconst spinner = document.querySelector('.loading__icon'); // находим спиннер\n\n\t\tif (spinner) {\n\t\t\tspinner.style.borderColor = spinSettings.borderColor;\n\t\t}\n\n\t\tconst timerId = setInterval(() => {\n\n\t\t\tif (!spinSettings.timerId) spinSettings.timerId = timerId;\n\n\t\t\tconst spinner = document.querySelector('.loading__icon');\n\n\t\t\tif (!spinner) {\n\t\t\t\tspinSettings.timerId = null;\n\t\t\t\tclearInterval(timerId);\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (pos === 4) {\n\t\t\t\tpos = 0;\n\t\t\t\tswitcher = !switcher;\n\t\t\t}\n\n\t\t\tif (switcher) {\n\t\t\t\tspinner.style[arr[pos]] = '5px solid transparent';\n\t\t\t} else {\n\t\t\t\tspinner.style[arr[pos]] = '5px solid #434753';\n\t\t\t}\n\n\t\t\tpos++;\n\n\t\t\tspinSettings.pos = pos; // запомнить настройки\n\t\t\tspinSettings.switcher = switcher;\n\t\t\tspinSettings.borderColor = spinner.style.borderColor;\n\n\t\t}, 1000);\n\n\t\treturn;\n\t};\n\n\t// создаёт компонент для ошибки и загрузки\n\tcreateStatusText(contactsStatus, chatStatus) {\n\n\t\tlet statusText = '';\n\n\t\tif (contactsStatus === 'error') {\n\t\t\tstatusText = 'Contacts loading error...';\n\t\t\treturn (<Error text={statusText} />);\n\n\t\t} else if (chatStatus === 'error') {\n\t\t\tstatusText = 'Chat loading error...';\n\t\t\treturn (<Error text={statusText} />);\n\n\t\t} else if (contactsStatus === '') {\n\t\t\tstatusText = 'Contacts loading...';\n\t\t\treturn (<Loading text={statusText} />);\n\n\t\t} else if (contactsStatus === 'loaded' && chatStatus === '') {\n\t\t\tstatusText = 'Chat loading...';\n\t\t\treturn (<Loading text={statusText} />);\n\n\t\t}\n\t}\n\n\trender() {\n\n\t\tconst {posts, contactsStatus, chatStatus} = this.state;\n\n\t\treturn (\n\t\t\t<div className=\"container\">\n\t\t\t\t<Header\n\t\t\t\t\tchatWith={this.chatWith}\n\t\t\t\t\tcontactsStatus={contactsStatus}\n\t\t\t\t/>\n\n\t\t\t\t<div className=\"info\">\n\t\t\t\t\t<Contacts\n\t\t\t\t\t\tloadChat={this.loadChat}\n\t\t\t\t\t\tcheckStatus={this.contactsLoading}\n\t\t\t\t\t\tgetChatData={this.getChatData}\n\t\t\t\t\t/>\n\n\t\t\t\t\t<div className=\"content\">\n\t\t\t\t\t\t{this.createStatusText(contactsStatus, chatStatus)}\n\n\t\t\t\t\t\t{(chatStatus === 'loaded') && <Chat data={posts} />}\n\t\t\t\t\t\t{(chatStatus === 'loaded') && <Add onAddPosts={this.handleAddPosts} />}\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}